
<!-- saved from url=(0040)https://eecs.wsu.edu/~cs360/LAB3pre.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252"></head><body>
<pre>
             LAB3pre Work: Processes in an OS Kernel
                     DUE: 9-22-2020
       Answer questions below. Submit a (text-edit) file to TA
	     
1. READ List: Chapter 3: 3.1-3.5

What's a process? (Page 102) Process is the execution of an image
	     
	Each process is represented by a PROC structure.
Read the PROC structure in 3.4.1 on Page 111 and answer the following questions:

What's the meaning of:
   pid, ppid?_pid = process ID, ppid = parent Process ID
   status ?_Status of process
   priority ? scheduling priority
   event ? event value to sleep on
   exitCode ? Exit value

READ 3.5.2 on Process Family Tree. What are the PROC pointers child, sibling, parent used for? 
	Child points to the first child of a process and the sibling points to a list of other children of the same parent. Parent pointer is used to point at its parent. Child pointers are used to get to the first child of PROC and sibling pointers are used traverse the sibling PROC. The parent pointer is where to start.
	     
2. Download samples/LAB3pre/mtx. Run it under Linux.
   MTX is a multitasking system which simulates process operations of
         fork, exit, wait, sleep, wakeup
   in a Unix/Linux kernel
	     
/*********** A Multitasking System ************/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#include "type.h"    // PROC struct and system constants
	
// global variables:
PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList; 

running    = pointer to the current running proc
freeList   = a list of all FREE PROCs
readyQueue = a priority queue of procs READY to run
sleepList  = a list of SLEEP procs, if any.

Run mtx. It first initialize the system, creates an initial process P0.
P0 has the lowest priotiry 0, all other processes have priority 1

Ater initialization,
     P0 forks a child prcoess P1, switch process to run P1.

                The display looks like the following
-----------------------------------------------------------------------------
Welcome to KCW's Multitasking System
1. init system
freeList = [0 0]-&gt;[1 0]-&gt;[2 0]-&gt;[3 0]-&gt;[4 0]-&gt;[5 0]-&gt;[6 0]-&gt;[7 0]-&gt;[8 0]-&gt;NULL
2. create initial process P0
freeList = [1 0]-&gt;[2 0]-&gt;[3 0]-&gt;[4 0]-&gt;[5 0]-&gt;[6 0]-&gt;[7 0]-&gt;[8 0]-&gt;NULL
init complete: P0 running
3. P0 fork P1
4. P0 switch process to P1
P0: switch task
proc 0 in scheduler()
readyQueue = [1 1]-&gt;[0 0]-&gt;NULL
next running = 1
proc 1 resume to body()

proc 1 running: Parent=0 childList = NULL
freeList  = [2 0]-&gt;[3 0]-&gt;[4 0]-&gt;[5 0]-&gt;[6 0]-&gt;[7 0]-&gt;[8 0]-&gt;NULL
readQueue = [0 0]-&gt;NULL
sleepList = NULL
input a command: [ps|fork|switch|exit|sleep|wakeup|wait] : 
----------------------------------------------------------------------------
3.                     COMMANDS:
ps     : display procs with pid, ppid, status; same as ps in Unix/Linux
fork   : READ kfork()   on Page 109: What does it do? Creates a child task and enters it into the readyQueue
switch : READ tswitch() on Page 108: What does it do? It implements process context switching.
exit   : READ kexit()   on Page 112: What does it do? Kexit() terminates a process. 
         
sleep  : READ ksleep()  on Page 111: What does it do? It puts a process into sleep. 
wakeup : READ kwakeup() on Page 112: What does it do? Wakes up all the process sleeping on the event value.
	     
wait   : READ kwait()   on Page 114: What does it do? It waits for a zombie child process and return its pid. Also release the zombie child process back to freeList.
---------------------------------------------------------------------------

------------------------ REQUIREMENTS -----------------------------------
4.                Step 1: test fork
While P1 running, enter fork: What happens? Process2 is been added to the readyQueue and one node of freeList is removed. 

Enter fork many times; 
      How many times can P1 fork? 7 times WHY? Because as P1 forks, the nodes of freeList are moved and added to readyQueue to store process. There is no more free process once freeList contains 0 node.

Enter Control-c to end the program run.


5.                Step 2: Test sleep/wakeup
Run mtx again.
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go? Current running process becomes P2 and P1 is added into readyQueue. WHY? Because the process is switched. P1 is saved for further processing if P2 has any actions. 
P2: Enter sleep, with a value, e.g.123 to let P2 SLEEP.
What happens? P2 is entering sleepList and P1 is running WHY? Sleep temporarily stop process based on the sleep value and runs its parent process.

Now, P1 should be running. Enter wakeup with a value, e.g. 234
Did any proc wake up? No WHY? Because the process with corresponding value 234 is not sleeping.

P1: Enter wakeup with 123
What happens?  P2 is added into readyQueue WHY? Because P2 coresponding value is 123 and it is waked up with wakeup command. Wakeup command moves node in sleepList to readyQueue if the node has the right value.


6.          Step 3: test child exit/parent wait
	     
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens?_Error. P1 doesn’t have zombie child. WHY? Because P1 doesn’t have any child and therefore nothing to free.

	    CASE 1: child exit first, parent wait later
P1: fork a child P2, switch to P2.
P2: enter exit, with a value, e.g. 123 ==&gt; P2 will die with exitCode=123.
Which process runs now? P1 WHY? Because p2 becomes zombie child, wakeup its parent and run its parent as cur process.
enter ps to see the proc status: P2 status = ? Zombie

(P1 still running) enter wait; What happens?P2 has been free and enqueue into freeList. 
 Enter ps;   What happened to P2?P2’s status is free now.

	     CASE 2: parent wait first, child exit later
P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1? P1 enters sleepList WHY? Wait switch cur process P1’s child, P3 and put p1 into sleepList, wait for further call.
P3: Enter exit with a value; What happens? P1 becomes the cur process and P3 enquee to the free list. 
P1: enter ps;  What's the status of P3? Free WHY? Because when P3 is terminated, P1 is forced to wakeup.
	     
7.             Step 4: test Orphans
	     
When a process with children dies first, all its children become orphans.
In Unix/Linux, every process (except P0) MUST have a unique parent.
So, all orphans become P1's children. Hence P1 never dies.

Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value. 
P1 should be running WHY? Because P1 is init process. It should not be freed with any child.
P1: enter ps to see proc status: which proc is ZOMBIE? P2 
What happened to P2's children? Becomes P1’s children
P1: enter wait; What happens? P2 is freed.
P1: enter wait again; What happens? P3 becomes current running process and P1 enter sleep list. WHY? Wait switch cur process P1’s child, P3 and put p1 into sleepList, wait for further call.

How to let P1 READY to run again? Enter Exit command twice.
